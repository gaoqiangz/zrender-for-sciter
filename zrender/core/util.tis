/**
 * @module zrender/core/util
 */
namespace util
{

// FIXME
var _ctx;
function getContext() {
    if (!_ctx) {
        // Use util.createCanvas instead of createCanvas
        // because createCanvas may be overwritten in different environment
        _ctx = self.getContext("2d");//createCanvas().getContext("2d");
    }
    return _ctx;
}

/**
 * Those data types can be cloned:
 *     Plain object, Array, TypedArray, number, string, null, undefined.
 * Those data types will be assgined using the orginal data:
 *     BUILTIN_OBJECT
 * Instance of user defined class will be cloned to a plain object, without
 * properties in prototype.
 * Other data types is not supported (not sure what will happen).
 *
 * Caution: do not support clone Date, for performance consideration.
 * (There might be a large number of date in `series.data`).
 * So date should not be modified in and out of echarts.
 *
 * @param {*} source
 * @return {*} new
 */
function clone(source) {
    if (source == null || 
        (typeof source !== #object && typeof source !== #array)) {
        return source;
    }
    
    var result = source;
    var typeStr = typeof source;

    if (typeStr === #array) {
        //if (!isPrimitive(source)) {
            result = [];
            for (var i in source.length) {
                result[i] = clone(source[i]);
            }
        //}
    }
    else if (/*!BUILTIN_OBJECT[typeStr] && */!isPrimitive(source)/* && !isDom(source)*/) {
        result = {};
        for (var key in source) {
            result[key] = clone(source[key]);
        }
    }

    return result;
}

/**
 * @memberOf module:zrender/core/util
 * @param {*} target
 * @param {*} source
 * @param {boolean} [overwrite=false]
 */
function merge(target, source, overwrite = false) {
    // We should escapse that source is string
    // and enter for ... in ...
    if (!isObject(source) || !isObject(target)) {
        return overwrite ? clone(source) : target;
    }

    for (var key in source) {
        var targetProp = target[key];
        var sourceProp = source[key];

        if (isObject(sourceProp)
            && isObject(targetProp)
            && !isArray(sourceProp)
            && !isArray(targetProp)
            && !isDom(sourceProp)
            && !isDom(targetProp)
            && !isBuiltInObject(sourceProp)
            && !isBuiltInObject(targetProp)
            && !isPrimitive(sourceProp)
            && !isPrimitive(targetProp)
        ) {
            // 如果需要递归覆盖，就递归调用merge
            merge(targetProp, sourceProp, overwrite);
        }
        else if (overwrite || !(key in target)) {
            // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
            // NOTE，在 target[key] 不存在的时候也是直接覆盖
            target[key] = clone(source[key], true);
        }
    }

    return target;
}

/**
 * @param {Array} targetAndSources The first item is target, and the rests are source.
 * @param {boolean} [overwrite=false]
 * @return {*} target
 */
function mergeAll(targetAndSources, overwrite = false) {
    var result = targetAndSources[0];
    for (var i = 1, len = targetAndSources.length; i < len; i++) {
        result = merge(result, targetAndSources[i], overwrite);
    }
    return result;
}

/**
 * @param {*} target
 * @param {*} source
 * @memberOf module:zrender/core/util
 */
function extend(target, source) {
    for (var key in source) {
        target[key] = source[key];
    }
    return target;
}

/**
 * @param {*} target
 * @param {*} source
 * @param {boolean} [overlay=false]
 * @memberOf module:zrender/core/util
 */
function defaults(target, source, overlay = false) {
    for (var key in source) {
        if (overlay ? source[key] !== undefined : target[key] === undefined) {
            target[key] = source[key];
        }
    }
    return target;
}

function createCanvas() {
    var el = document.createElement("canvas");
    $(head).append(el);
    el.style["display"] = "block";
    return el;
}

/**
 * 查询数组中元素的index
 * @memberOf module:zrender/core/util
 */
function indexOf(array, value) {
    if (array) {
        return array.indexOf(value);
    }
    return -1;
}

/**
 * @memberOf module:zrender/core/util
 * @param {Object|Function} target
 * @param {Object|Function} sorce
 * @param {boolean} overlay
 */
function mixin(target, source, overlay = false) {
    //target = target.prototype ? target.prototype : target;
    //source = source.prototype ? source.prototype : source;

    defaults(target, source, overlay);
}

/**
 * Consider typed array.
 * @param {Array|TypedArray} data
 */
function isArrayLike(data) {
    return typeof data === #array;
    /*if (!data) {
        return false;
    }
    if (typeof data == #string) {
        return false;
    }
    return isNumber(data.length);*/
}

/**
 * 数组或对象遍历
 * @memberOf module:zrender/core/util
 * @param {Object|Array} obj
 * @param {Function} cb
 * @param {*} [context]
 */
function each(obj, cb, context = obj) {
    if (!(obj && cb)) {
        return;
    }
    if (typeof obj === #array) {
        for (var i in obj.length) {
            cb.call(context, obj[i], i, obj);
        }
    }
    else {
        for (var key in obj) {
            cb.call(context, obj[key], key, obj);
        }
    }
}

/**
 * 数组映射
 * @memberOf module:zrender/core/util
 * @param {Array} obj
 * @param {Function} cb
 * @param {*} [context]
 * @return {Array}
 */
function map(obj, cb, context = obj) {
    if (!(obj && cb)) {
        return;
    }
    return obj.map(cb, context);
}

/**
 * @memberOf module:zrender/core/util
 * @param {Array} obj
 * @param {Function} cb
 * @param {Object} [memo]
 * @param {*} [context]
 * @return {Array}
 */
function reduce(obj, cb, memo, context = obj) {
    if (!(obj && cb)) {
        return;
    }
    return obj.reduce(cb, memo, context);
}

/**
 * 数组过滤
 * @memberOf module:zrender/core/util
 * @param {Array} obj
 * @param {Function} cb
 * @param {*} [context]
 * @return {Array}
 */
function filter(obj, cb, context = obj) {
    if (!(obj && cb)) {
        return;
    }
    return obj.filter(cb, context);
}

/**
 * 数组项查找
 * @memberOf module:zrender/core/util
 * @param {Array} obj
 * @param {Function} cb
 * @param {*} [context]
 * @return {*}
 */
function find(obj, cb, context = obj) {
    if (!(obj && cb)) {
        return;
    }
    for (var i in obj.length) {
        if (cb.call(context, obj[i], i, obj)) {
            return obj[i];
        }
    }
}

/**
 * @memberOf module:zrender/core/util
 * @param {Function} func
 * @param {*} context
 * @return {Function}
 */
function bind(arguments..) {
    var func = arguments[0];
    var context = arguments[1];
    var args = arguments.slice(2);
    return function (arguments..) {
        return func.apply(context, args.concat(arguments.slice(0)));
    };
}

/**
 * @memberOf module:zrender/core/util
 * @param {Function} func
 * @return {Function}
 */
function curry(arguments..) {
    var func = arguments[0];
    var args = arguments.slice(1);
    return function (arguments..) {
        return func.apply(this, args.concat(arguments.slice(0)));
    };
}

/**
 * @memberOf module:zrender/core/util
 * @param {*} value
 * @return {boolean}
 */
function isArray(value) {
    return typeof value === #array;
}

/**
 * @memberOf module:zrender/core/util
 * @param {*} value
 * @return {boolean}
 */
function isFunction(value) {
    return typeof value === #function;
}

/**
 * @memberOf module:zrender/core/util
 * @param {*} value
 * @return {boolean}
 */
function isString(value) {
    return typeof value === #string || typeof value === #symbol;
}

/**
 * @memberOf module:zrender/core/util
 * @param {*} value
 * @return {boolean}
 */
function isObject(value) {
    return typeof value === #Element || typeof value === #object || typeof value === #function;
    /*// Avoid a V8 JIT bug in Chrome 19-20.
    // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
    var type = typeof value;
    return type === 'function' || (!!value && type == 'object');*/
}

/**
 * @memberOf module:zrender/core/util
 * @param {*} value
 * @return {boolean}
 */
function isBuiltInObject(value) {
    return !!BUILTIN_OBJECT[value.toString()];
}

/**
 * @memberOf module:zrender/core/util
 * @param {*} value
 * @return {boolean}
 */
function isTypedArray(value) {
    return false;
}

/**
 * @memberOf module:zrender/core/util
 * @param {*} value
 * @return {boolean}
 */
function isDom(value) {
    /*return typeof value === #object
        && isNumber(value.nodeType)
        && typeof value.ownerDocument === #object;*/
    return typeof value === #Element;
}

/**
 * Whether is exactly NaN. Notice isNaN('a') returns true.
 * @param {*} value
 * @return {boolean}
 */
function eqNaN(value) {
    return value !== value;
}

/**
 * If value1 is not null, then return value1, otherwise judget rest of values.
 * Low performance.
 * @memberOf module:zrender/core/util
 * @return {*} Final value
 */
function retrieve(values, arguments..) {
    if(values != null) return values;
    for (var arg in arguments) {
        if (arg != null) {
            return arg;
        }
    }
    return null;
}

function retrieve2(value0, value1) {
    return value0 != null
        ? value0
        : value1;
}

function retrieve3(value0, value1, value2) {
    return value0 != null
        ? value0
        : value1 != null
        ? value1
        : value2;
}

/**
 * @memberOf module:zrender/core/util
 * @param {Array} arr
 * @param {number} startIndex
 * @param {number} endIndex
 * @return {Array}
 */
function slice(arguments..) {
    return arguments.slice(0);
}

/**
 * Normalize css liked array configuration
 * e.g.
 *  3 => [3, 3, 3, 3]
 *  [4, 2] => [4, 2, 4, 2]
 *  [4, 3, 2] => [4, 3, 2, 3]
 * @param {number|Array.<number>} val
 * @return {Array.<number>}
 */
function normalizeCssArray(val) {
    if (isNumber(val)) {
        return [val, val, val, val];
    }
    var len = val.length;
    if (len === 2) {
        // vertical | horizontal
        return [val[0], val[1], val[0], val[1]];
    }
    else if (len === 3) {
        // top | horizontal | bottom
        return [val[0], val[1], val[2], val[1]];
    }
    return val;
}

/**
 * @memberOf module:zrender/core/util
 * @param {boolean} condition
 * @param {string} message
 */
//*assert为tis的保留字
//*改名为assertf
//*也可直接使用assert <test-expression> [ : <info-expression> ]
function assertf(condition, message) {
    if (!condition) {
        throw message;
        //throw new Error(message);
    }
}

/**
 * @memberOf module:zrender/core/util
 * @param {string} str string to be trimed
 * @return {string} trimed string
 */
function trim(str) {
    if (str == null) {
        return null;
    }
    else if (typeof str.trim === #function) {
        return str.trim();
    }
    else {
        return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    }
}

var primitiveKey = "__ec_primitive__";

/**
 * Set an object as primitive to be ignored traversing children in clone or merge
 */
function setAsPrimitive(obj) {
    obj[primitiveKey] = true;
}

function isPrimitive(obj) {
    return obj[primitiveKey];
}

class HashMap
{

    /**
    * @constructor
    * @param {Object} obj Only apply `ownProperty`.
    */
    function this(obj) {
        var isArr = isArray(obj);
        var thisMap = this;

        (obj instanceof HashMap)
            ? obj.each(visit)
            : (obj && each(obj, visit));

        function visit(value, key) {
            isArr ? thisMap.set(value, key) : thisMap.set(key, value);
        }
    }

    function ge(key) {
        return this[key];
    }

    function set(key,value) {
        // Comparing with invocation chaining, `return value` is more commonly
        // used in this case: `var someVal = map.set('a', genVal());`
        return (this[key] = value);
    }

    // Although util.each can be performed on this hashMap directly, user
    // should not use the exposed keys, who are prefixed.
    function each(cb, context = undefined) {
        for (var key in this) {
            if(context)
                cb.call(context,this[key], key);
            else
                cb(this[key], key);
        }
    }

    // Do not use this method if performance sensitive.
    function removeKey(key) {
        delete this[key];
    }

} //class HashMap

function createHashMap(obj) {
    return new HashMap(obj);
}

function concatArray(a, b) {
    return a.clone().concat(b);
    /*var newArray = new a.constructor(a.length + b.length);
    for (var i = 0; i < a.length; i++) {
        newArray[i] = a[i];
    }
    var offset = a.length;
    for (i = 0; i < b.length; i++) {
        newArray[i + offset] = b[i];
    }
    return newArray;*/
}

function noop() {}

} //namespace util
