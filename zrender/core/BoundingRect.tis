/**
 * @module echarts/core/BoundingRect
 */

//import
include "./vector.tis"
include "./matrix.tis"

class BoundingRect
{
    /**
    * @alias module:echarts/core/BoundingRect
    */
    function this(x = 0, y = 0, width = 0, height = 0) {

        if (width < 0) {
            x = x + width;
            width = -width;
        }
        if (height < 0) {
            y = y + height;
            height = -height;
        }

        /**
        * @type {number}
        */
        this.x = x;
        /**
        * @type {number}
        */
        this.y = y;
        /**
        * @type {number}
        */
        this.width = width;
        /**
        * @type {number}
        */
        this.height = height;

        /**
        * @param {Array.<number>} m
        * @methods
        */
        this.applyTransform = (function () {
            var lt = [];
            var rb = [];
            var lb = [];
            var rt = [];
            return function (m) {
                // In case usage like this
                // el.getBoundingRect().applyTransform(el.transform)
                // And element has no transform
                if (!m) {
                    return;
                }
                lt[0] = lb[0] = this.x;
                lt[1] = rt[1] = this.y;
                rb[0] = rt[0] = this.x + this.width;
                rb[1] = lb[1] = this.y + this.height;

                vector.applyTransform(lt, lt, m);
                vector.applyTransform(rb, rb, m);
                vector.applyTransform(lb, lb, m);
                vector.applyTransform(rt, rt, m);

                this.x = Math.min(lt[0], rb[0], lb[0], rt[0]);
                this.y = Math.min(lt[1], rb[1], lb[1], rt[1]);
                var maxX = Math.max(lt[0], rb[0], lb[0], rt[0]);
                var maxY = Math.max(lt[1], rb[1], lb[1], rt[1]);
                this.width = maxX - this.x;
                this.height = maxY - this.y;
            };
        })();
    }

    /**
    * @param {module:echarts/core/BoundingRect} other
    */
    function union(other) {
        var x = Math.min(other.x, this.x);
        var y = Math.min(other.y, this.y);

        this.width = Math.max(
                other.x + other.width,
                this.x + this.width
            ) - x;
        this.height = Math.max(
                other.y + other.height,
                this.y + this.height
            ) - y;
        this.x = x;
        this.y = y;
    }
    
    /**
    * Calculate matrix of transforming from self to target rect
    * @param  {module:zrender/core/BoundingRect} b
    * @return {Array.<number>}
    */
    function calculateTransform(b) {
        var a = this;
        var sx = b.width / a.width;
        var sy = b.height / a.height;

        var m = matrix.create();

        // 矩阵右乘
        matrix.translate(m, m, [-a.x, -a.y]);
        matrix.scale(m, m, [sx, sy]);
        matrix.translate(m, m, [b.x, b.y]);

        return m;
    }

    /**
    * @param {(module:echarts/core/BoundingRect|Object)} b
    * @return {boolean}
    */
    function intersect(b) {
        if (!b) {
            return false;
        }

        if (!(b instanceof BoundingRect)) {
            // Normalize negative width/height.
            b = BoundingRect.create(b);
        }

        var a = this;
        var ax0 = a.x;
        var ax1 = a.x + a.width;
        var ay0 = a.y;
        var ay1 = a.y + a.height;

        var bx0 = b.x;
        var bx1 = b.x + b.width;
        var by0 = b.y;
        var by1 = b.y + b.height;

        return ! (ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);
    }
    
    function contain(x, y) {
        var rect = this;
        return x >= rect.x
            && x <= (rect.x + rect.width)
            && y >= rect.y
            && y <= (rect.y + rect.height);
    }

    /**
    * @return {module:echarts/core/BoundingRect}
    */
    function clone() {
        return new BoundingRect(this.x, this.y, this.width, this.height);
    }

    /**
    * Copy from another rect
    */
    function copy(other) {
        this.x = other.x;
        this.y = other.y;
        this.width = other.width;
        this.height = other.height;
    }

    function plain() {
        return {
            x: this.x,
            y: this.y,
            width: this.width,
            height: this.height
        };
    }

    /**
    * @param {Object|module:zrender/core/BoundingRect} rect
    * @param {number} rect.x
    * @param {number} rect.y
    * @param {number} rect.width
    * @param {number} rect.height
    * @return {module:zrender/core/BoundingRect}
    */
    function create(rect) {
        return new BoundingRect(rect.x, rect.y, rect.width, rect.height);
    }

} //class BoundingRect
