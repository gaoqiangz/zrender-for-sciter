// Simple LRU cache use doubly linked list
// @module zrender/core/LRU

namespace ns_lru
{

/**
* Simple double linked list. Compared with array, it has O(1) remove operation.
* @constructor
*/
class LinkedList
{
    /**
    * @type {module:zrender/core/LRU~Entry}
    */
    var head = null;

    /**
    * @type {module:zrender/core/LRU~Entry}
    */
    var tail = null;

    var _len = 0;

    /**
    * Insert a new value at the tail
    * @param  {} val
    * @return {module:zrender/core/LRU~Entry}
    */
    function insert(val) {
        var entry = new Entry(val);
        this.insertEntry(entry);
        return entry;
    }

    /**
    * Insert an entry at the tail
    * @param  {module:zrender/core/LRU~Entry} entry
    */
    function insertEntry(entry) {
        if (!this.head) {
            this.head = this.tail = entry;
        }
        else {
            this.tail.next = entry;
            entry.prev = this.tail;
            entry.next = null;
            this.tail = entry;
        }
        this._len++;
    }

    /**
    * Remove entry.
    * @param  {module:zrender/core/LRU~Entry} entry
    */
    function remove(entry) {
        var prev = entry.prev;
        var next = entry.next;
        if (prev) {
            prev.next = next;
        }
        else {
            // Is head
            this.head = next;
        }
        if (next) {
            next.prev = prev;
        }
        else {
            // Is tail
            this.tail = prev;
        }
        entry.next = entry.prev = null;
        this._len--;
    }

    /**
    * @return {number}
    */
    function len() {
        return this._len;
    }

    /**
    * Clear list
    */
    function clear() {
        this.head = this.tail = null;
        this._len = 0;
    }

} //class LinkedList

class Entry
{
    /**
    * @constructor
    * @param {} val
    */
    function this(val) {
        /**
        * @type {}
        */
        this.value = val;

        /**
        * @type {module:zrender/core/LRU~Entry}
        */
        this.next;

        /**
        * @type {module:zrender/core/LRU~Entry}
        */
        this.prev;
    };
} //class Entry

class LRU
{
    /**
    * LRU Cache
    * @constructor
    * @alias module:zrender/core/LRU
    */
    function this(maxSize) {

        this._list = new LinkedList();

        this._map = {};

        this._maxSize = maxSize || 10;

        this._lastRemovedEntry = null;
    }

    /**
    * @param  {string} key
    * @param  {} value
    * @return {} Removed value
    */
    function put(key, value) {
        var list = this._list;
        var map = this._map;
        var removed = null;
        if (map[key] === undefined) {
            var len = list.len();
            // Reuse last removed entry
            var entry = this._lastRemovedEntry;

            if (len >= this._maxSize && len > 0) {
                // Remove the least recently used
                var leastUsedEntry = list.head;
                list.remove(leastUsedEntry);
                delete map[leastUsedEntry.key];

                removed = leastUsedEntry.value;
                this._lastRemovedEntry = leastUsedEntry;
            }

            if (entry) {
                entry.value = value;
            }
            else {
                entry = new Entry(value);
            }
            entry.key = key;
            list.insertEntry(entry);
            map[key] = entry;
        }

        return removed;
    }

    /**
    * @param  {string} key
    * @return {}
    */
    function get(key) {
        var entry = this._map[key];
        var list = this._list;
        if (entry !== undefined) {
            // Put the latest used entry in the tail
            if (entry !== list.tail) {
                list.remove(entry);
                list.insertEntry(entry);
            }

            return entry.value;
        }
    }

    /**
    * Clear the cache
    */
    function clear() {
        this._list.clear();
        this._map = {};
    }
    
} //class LRU

} //namespace ns_lru

//export
var LRU = ns_lru.LRU;