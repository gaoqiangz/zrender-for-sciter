/**
 * 可绘制的图形基类
 * Base class of all displayable graphic objects
 * @module zrender/graphic/Displayable
 */

//import
include "../core/util.tis"
include "./Style.tis"
include "../Element.tis"
include "./mixin/RectText.tis"

class Displayable : zrElement
{
    /**
    * @alias module:zrender/graphic/Displayable
    * @extends module:zrender/Element
    * @extends module:zrender/graphic/mixin/RectText
    */
    function this(opts = null) {

        opts = opts || {};

        super(opts);

        // Extend properties
        for (var (name,val) in opts) {
            if(typeof name === #stirng)
                name = symbol(name);
            if (name !== #style) {
                this[name] = val;
            }
        }

        /**
        * @type {module:zrender/graphic/Style}
        */
        this.style = new Style(opts.style, this);

        this._rect = null;
        // Shapes for cascade clipping.
        this.__clipPaths = [];

        // FIXME Stateful must be mixined after style is setted
        // Stateful.call(this, opts);
        
    }

    var type = "displayable";

    /**
     * Displayable 是否为脏，Painter 中会根据该标记判断是否需要是否需要重新绘制
     * Dirty flag. From which painter will determine if this displayable object needs brush
     * @name module:zrender/graphic/Displayable#__dirty
     * @type {boolean}
     */
    var __dirty = true;

    /**
     * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件
     * If ignore drawing of the displayable object. Mouse event will still be triggered
     * @name module:/zrender/graphic/Displayable#invisible
     * @type {boolean}
     * @default false
     */
    var invisible = false;

    /**
     * @name module:/zrender/graphic/Displayable#z
     * @type {number}
     * @default 0
     */
    var z = 0;

    /**
     * @name module:/zrender/graphic/Displayable#z
     * @type {number}
     * @default 0
     */
    var z2 = 0;

    /**
     * z层level，决定绘画在哪层canvas中
     * @name module:/zrender/graphic/Displayable#zlevel
     * @type {number}
     * @default 0
     */
    var zlevel = 0;

    /**
     * 是否可拖拽
     * @name module:/zrender/graphic/Displayable#draggable
     * @type {boolean}
     * @default false
     */
    var draggable = false;

    /**
     * 是否正在拖拽
     * @name module:/zrender/graphic/Displayable#draggable
     * @type {boolean}
     * @default false
     */
    var dragging = false;

    /**
     * 是否相应鼠标事件
     * @name module:/zrender/graphic/Displayable#silent
     * @type {boolean}
     * @default false
     */
    var silent = false;

    /**
     * If enable culling
     * @type {boolean}
     * @default false
     */
    var culling = false;

    /**
     * Mouse cursor when hovered
     * @name module:/zrender/graphic/Displayable#cursor
     * @type {string}
     */
    var cursor = "pointer";

    /**
     * If hover area is bounding rect
     * @name module:/zrender/graphic/Displayable#rectHover
     * @type {string}
     */
    var rectHover = false;

    /**
     * Render the element progressively when the value >= 0,
     * usefull for large data.
     * @type {boolean}
     */
    var progressive = false;

    /**
     * @type {boolean}
     */
    var incremental = false;
    // inplace is used with incremental
    var inplace = false;

    function beforeBrush(ctx) {}

    function afterBrush(ctx) {}

    /**
     * 图形绘制方法
     * @param {CanvasRenderingContext2D} ctx
     */
    // Interface
    function brush(ctx, prevEl) {}

    /**
     * 获取最小包围盒
     * @return {module:zrender/core/BoundingRect}
     */
    // Interface
    function getBoundingRect() {}

    /**
     * 判断坐标 x, y 是否在图形上
     * If displayable element contain coord x, y
     * @param  {number} x
     * @param  {number} y
     * @return {boolean}
     */
    function contain(x, y) {
        return this.rectContain(x, y);
    }

    /**
     * @param  {Function} cb
     * @param  {}   context
     */
    function traverse(cb, context) {
        cb.call(context, this);
    }

    /**
     * 判断坐标 x, y 是否在图形的包围盒上
     * If bounding rect of element contain coord x, y
     * @param  {number} x
     * @param  {number} y
     * @return {boolean}
     */
    function rectContain(x, y) {
        var coord = this.transformCoordToLocal(x, y);
        var rect = this.getBoundingRect();
        return rect.contain(coord[0], coord[1]);
    }

    /**
     * 标记图形元素为脏，并且在下一帧重绘
     * Mark displayable element dirty and refresh next frame
     */
    function dirty() {
        this.__dirty = true;

        this._rect = null;

        this.__zr && this.__zr.refresh();
    }

    /**
     * 图形是否会触发事件
     * If displayable object binded any event
     * @return {boolean}
     */
    // TODO, 通过 bind 绑定的事件
    // isSilent: function () {
    //     return !(
    //         this.hoverable || this.draggable
    //         || this.onmousemove || this.onmouseover || this.onmouseout
    //         || this.onmousedown || this.onmouseup || this.onclick
    //         || this.ondragenter || this.ondragover || this.ondragleave
    //         || this.ondrop
    //     );
    // },
    /**
     * Alias for animate("style")
     * @param {boolean} loop
     */
    function animateStyle(loop = false) {
        return this.animate(#style, loop);
    }

    function attrKV(key, value) {
        if(typeof key === #stirng)
            key = symbol(key);
        if (key !== #style) {
            super.attrKV(key, value);
        }
        else {
            this.style.set(value);
        }
    }

    /**
     * @param {Object|string} key
     * @param {*} value
     */
    function setStyle(key, value = undefined) {
        this.style.set(key, value);
        this.dirty(false);
        return this;
    }

    /**
     * Use given style object
     * @param  {Object} obj
     */
    function useStyle(obj) {
        this.style = new Style(obj, this);
        this.dirty(false);
        return this;
    }
    
} //class Displayable

util.mixin(Displayable, RectText);
