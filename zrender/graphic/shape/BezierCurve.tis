/**
 * 贝塞尔曲线
 * @module zrender/shape/BezierCurve
 */
//import
include "../Path.tis"
include "../../core/vector.tis"
include "../../core/curve.tis"

namespace ns_beziercurve
{

var out = [];

function someVectorAt(shape, t, isTangent) {
    var cpx2 = shape.cpx2;
    var cpy2 = shape.cpy2;
    if (cpx2 === null || cpy2 === null) {
        return [
            (isTangent ? curve.cubicDerivativeAt : curve.cubicAt)(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t),
            (isTangent ? curve.cubicDerivativeAt : curve.cubicAt)(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)
        ];
    }
    else {
        return [
            (isTangent ? curve.quadraticDerivativeAt : curve.quadraticAt)(shape.x1, shape.cpx1, shape.x2, t),
            (isTangent ? curve.quadraticDerivativeAt : curve.quadraticAt)(shape.y1, shape.cpy1, shape.y2, t)
        ];
    }
}

var BezierCurve = Path.extend({

    type: "bezier-curve",

    shape: {
        x1: 0.0,
        y1: 0.0,
        x2: 0.0,
        y2: 0.0,
        cpx1: 0.0,
        cpy1: 0.0,
        cpx2: null,
        cpy2: null,

        // Curve show percent, for animating
        percent: 1.0
    },

    style: {
        stroke: "#000",
        fill: null
    },

    buildPath: function (ctx, shape) {
        var x1 = shape.x1;
        var y1 = shape.y1;
        var x2 = shape.x2;
        var y2 = shape.y2;
        var cpx1 = shape.cpx1;
        var cpy1 = shape.cpy1;
        var cpx2 = shape.cpx2;
        var cpy2 = shape.cpy2;
        var percent = shape.percent;
        if (percent == 0) {
            return;
        }

        ctx.moveTo(x1, y1);

        if (cpx2 === null || cpy2 === null) {
            if (percent < 1) {
                curve.quadraticSubdivide(
                    x1, cpx1, x2, percent, out
                );
                cpx1 = out[1];
                x2 = out[2];
                curve.quadraticSubdivide(
                    y1, cpy1, y2, percent, out
                );
                cpy1 = out[1];
                y2 = out[2];
            }

            ctx.quadraticCurveTo(
                cpx1, cpy1,
                x2, y2
            );
        }
        else {
            if (percent < 1) {
                curve.cubicSubdivide(
                    x1, cpx1, cpx2, x2, percent, out
                );
                cpx1 = out[1];
                cpx2 = out[2];
                x2 = out[3];
                curve.cubicSubdivide(
                    y1, cpy1, cpy2, y2, percent, out
                );
                cpy1 = out[1];
                cpy2 = out[2];
                y2 = out[3];
            }
            ctx.bezierCurveTo(
                cpx1, cpy1,
                cpx2, cpy2,
                x2, y2
            );
        }
    },

    /**
     * Get point at percent
     * @param  {number} t
     * @return {Array.<number>}
     */
    pointAt: function (t) {
        return someVectorAt(this.shape, t, false);
    },

    /**
     * Get tangent at percent
     * @param  {number} t
     * @return {Array.<number>}
     */
    tangentAt: function (t) {
        var p = someVectorAt(this.shape, t, true);
        return vector.normalize(p, p);
    }
});

} //namespace ns_beziercurve

var BezierCurve = ns_beziercurve.BezierCurve;