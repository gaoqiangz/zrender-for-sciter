//import
include "./Displayable.tis"
include "../core/util.tis"
include "../core/PathProxy.tis"
include "./Pattern.tis"

namespace ns_path
{

var getCanvasPattern = Pattern.getCanvasPattern;

class Path : Displayable
{
    /**
    * @alias module:zrender/graphic/Path
    * @extends module:zrender/graphic/Displayable
    * @constructor
    * @param {Object} opts
    */
    function this(opts) {
        super(opts);

        /**
        * @type {module:zrender/core/PathProxy}
        * @readOnly
        */
        this.path = new PathProxy();
    }

    var type = "path";

    var __dirtyPath = true;

    var strokeContainThreshold = 5.0;

    function brush(ctx, prevEl) {
        var style = this.style;
        var path = this.path;
        var hasStroke = style.hasStroke();
        var hasFill = style.hasFill();
        var hasFillGradient = hasFill && !!(style.fill.colorStops);
        var hasStrokeGradient = hasStroke && !!(style.stroke.colorStops);
        //var hasFillPattern = hasFill && !!(fill.image);
        //var hasStrokePattern = hasStroke && !!(style.stroke.image);
        
        style.bind(ctx, this, prevEl);
        this.setTransform(ctx);

        if (this.__dirty) {
            var rect;
            // Update gradient because bounding rect may changed
            if (hasFillGradient) {
                rect = rect || this.getBoundingRect();
                this._fillGradient = style.getGradient(ctx, style.fill, rect);
            }
            if (hasStrokeGradient) {
                rect = rect || this.getBoundingRect();
                this._strokeGradient = style.getGradient(ctx, style.stroke, rect);
            }
        }
        // Use the gradient or pattern
        if (hasFillGradient) {
            // PENDING If may have affect the state
            ctx.fillStyle = this._fillGradient;
        }
        /*else if (hasFillPattern) {
            ctx.fillStyle = getCanvasPattern.call(style.fill, ctx);
        }*/
        if (hasStrokeGradient) {
            ctx.strokeStyle = this._strokeGradient;
        }
        /*else if (hasStrokePattern) {
            ctx.strokeStyle = getCanvasPattern.call(style.stroke, ctx);
        }*/

        // Update path sx, sy
        //var scale = this.getGlobalScale();
        //path.setScale(scale[0], scale[1]);

        // Proxy context
        // Rebuild path in following 2 cases
        // 1. Path is dirty
        // 2. Path needs javascript implemented lineDash stroking.
        //    In this case, lineDash information will not be saved in PathProxy
        if (this.__dirtyPath) {
            path.beginPath();

            this.buildPath(path, this.shape, false);

            // Clear path dirty flag
            this.__dirtyPath = false;
        }

        if (style.lineDash) {
            ctx.setLineDash(style.lineDash);
            ctx.lineDashOffset = style.lineDashOffset;
        }

        if(hasFill && hasStroke)
            path.draw(ctx);
        else if(hasFill)
            path.fill(ctx);
        else if(hasStroke)
            path.stroke(ctx);

        if (style.lineDash) {
            // PENDING
            // Remove lineDash
            ctx.setLineDash([]);
        }

        // Draw rect text
        if (style.text != null) {
            // Only restore transform when needs draw text.
            this.restoreTransform(ctx);    
            this.drawRectText(ctx, this.getBoundingRect());
        }
    }

    // When bundling path, some shape may decide if use moveTo to begin a new subpath or closePath
    // Like in circle
    function buildPath(ctx, shapeCfg, inBundle) {}

    function createPathProxy() {
        this.path = new PathProxy();
    }

    function getBoundingRect() {
        var rect = this._rect;
        var style = this.style;
        var needsUpdateRect = !rect;
        if (needsUpdateRect) {
            if (this.__dirtyPath) {
                this.path.beginPath();
                this.buildPath(this.path, this.shape, false);
                // Clear path dirty flag
                // Added by gaoqiangz
                this.__dirtyPath = false;
            }
            rect = this.path.getBoundingRect();
        }
        this._rect = rect;

        if (style.hasStroke()) {
            // Needs update rect with stroke lineWidth when
            // 1. Element changes scale or lineWidth
            // 2. Shape is changed
            var rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());
            if (this.__dirty || needsUpdateRect) {
                rectWithStroke.copy(rect);
                // FIXME Must after updateTransform
                var w = style.lineWidth;
                // PENDING, Min line width is needed when line is horizontal or vertical
                var lineScale = style.strokeNoScale ? this.getLineScale() : 1.0;

                // Only add extra hover lineWidth when there are no fill
                if (!style.hasFill()) {
                    w = Math.max(w, this.strokeContainThreshold || 4.0);
                }
                // Consider line width
                // Line scale can"t be 0;
                if (lineScale > 1e-10) {
                    rectWithStroke.width += w / lineScale;
                    rectWithStroke.height += w / lineScale;
                    rectWithStroke.x -= w / lineScale / 2.0;
                    rectWithStroke.y -= w / lineScale / 2.0;
                }
            }

            // Return rect with stroke
            return rectWithStroke;
        }

        return rect;
    }

    function contain(x, y) {
        var rect = this.getBoundingRect();
        var localPos = this.transformCoordToLocal(x, y);
        x = localPos[0];
        y = localPos[1];
        if (!rect.contain(x, y)) return false;
        var style = this.style;
        if (style.hasFill()) {
            return this.path.contain(localPos[0],localPos[1]);
        }
        if (style.hasStroke()) {
            var lineWidth = style.lineWidth;
            var lineScale = style.strokeNoScale ? this.getLineScale() : 1;
            // Line scale can"t be 0;
            if (lineScale > 1e-10) {
                // Only add extra hover lineWidth when there are no fill
                if (!style.hasFill()) {
                    lineWidth = Math.max(lineWidth, this.strokeContainThreshold);
                }
                return this.path.containStroke(x, y,lineWidth / lineScale,style.hasFill());
            }
        }
        return false;
    }

    /**
     * @param  {boolean} dirtyPath
     */
    function dirty(dirtyPath = true) {
        // Only mark dirty, not mark clean
        if (dirtyPath) {
            this.__dirtyPath = dirtyPath;
            this._rect = null;
        }

        this.__dirty = true;

        this.__zr && this.__zr.refresh();

        // Used as a clipping path
        if (this.__clipTarget) {
            this.__clipTarget.dirty();
        }
    }

    /**
     * Alias for animate("shape")
     * @param {boolean} loop
     */
    function animateShape(loop) {
        return this.animate(#shape, loop);
    }

    // Overwrite attrKV
    function attrKV(key, value) {
        // FIXME
        if(typeof key === #stirng)
            key = symbol(key);
        if (key === #shape) {
            this.setShape(value);
            this.__dirtyPath = true;
            this._rect = null;
        }
        else {
            super.attrKV(key, value);
        }
    }

    /**
     * @param {Object|string} key
     * @param {*} value
     */
    function setShape(key, value = undefined) {
        var shape = this.shape;
        // Path from string may not have shape
        if (shape) {
            if (util.isObject(key)) {
                for (var (name,val) in key) {
                    shape[name] = val;
                }
            }
            else {
                if(typeof key === #stirng)
                    key = symbol(key);
                shape[key] = value;
            }
            this.dirty(true);
        }
        return this;
    }

    function getLineScale() {
        var m = this.transform;
        // Get the line scale.
        // Determinant of `m` means how much the area is enlarged by the
        // transformation. So its square root can be used as a scale factor
        // for width.
        return m && Math.abs(m[0] - 1) > 1e-10 && Math.abs(m[3] - 1) > 1e-10
            ? Math.sqrt(Math.abs(m[0] * m[3] - m[2] * m[1]))
            : 1;
    }

    /**
    * 扩展一个 Path element, 比如星形，圆等。
    * Extend a path element
    * @param {Object} props
    * @param {string} props.type Path type
    * @param {Function} props.init Initialize
    * @param {Function} props.buildPath Overwrite buildPath method
    * @param {Object} [props.style] Extended default style config
    * @param {Object} [props.shape] Extended default shape config
    */
    function extend(defaults) {
        var Sub = {};
        //constructor
        Sub.this = function (opts) {
            super(opts);

            if (defaults.style) {
                // Extend default style
                this.style.extendFrom(defaults.style, false);
            }

            // Extend default shape
            var defaultShape = defaults.shape;
            if (defaultShape) {
                this.shape = this.shape || {};
                for (var (name,val) in defaultShape) {
                    if (!this.shape.exists(name)) {
                        this.shape[name] = val;
                    }
                }
            }

            defaults.init && defaults.init.call(this, opts);
        };
        Sub.prototype = Path;
        
        // FIXME 不能 extend position, rotation 等引用对象
        for (var (name,val) in defaults) {
            // Extending prototype values and methods
            if (name !== #style && name !== #shape) {
                Sub[name] = val;
            }
        }

        return Sub;
    }

} //class Path

} //namespace ns_path

//export
var Path = ns_path.Path;
