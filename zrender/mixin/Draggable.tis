// TODO Draggable for group
// FIXME Draggable on element which has parent rotation or scale
class Draggable
{
    function this() {
        this.on(#mousedown, this._dragStart, this);
        this.on(#mousemove, this._drag, this);
        this.on(#mouseup, this._dragEnd, this);
        //取消鼠标移出元素时释放拖拽状态
        //by gaoqiangz
        //this.on("globalout", this._dragEnd, this);
    }
    
    function _dragStart(e) {
        if(e.event.propButton) return;
        var draggingTarget = e.target;
        if (draggingTarget && draggingTarget.draggable) {
            this._draggingTarget = draggingTarget;
            draggingTarget.dragging = true;
            this._x = e.offsetX;
            this._y = e.offsetY;

            //开启鼠标捕获
            //by gaoqiangz
            e.event.target.capture(#strict);

            this.dispatchToElement(_param(draggingTarget, e), #dragstart, e.event);
        }
    }

    function _drag(e) {
        var draggingTarget = this._draggingTarget;
        if (draggingTarget) {
            var x = e.offsetX;
            var y = e.offsetY;

            var dx = x - this._x;
            var dy = y - this._y;
            this._x = x;
            this._y = y;

            draggingTarget.drift(dx, dy, e);
            this.dispatchToElement(_param(draggingTarget, e), #drag, e.event);
            
            var dropTarget = this.findHover(x, y, draggingTarget).target;
            var lastDropTarget = this._dropTarget;
            this._dropTarget = dropTarget;

            if (draggingTarget !== dropTarget) {
                if (lastDropTarget && dropTarget !== lastDropTarget) {
                    this.dispatchToElement(_param(lastDropTarget, e), #dragleave, e.event);
                }
                if (dropTarget && dropTarget !== lastDropTarget) {
                    this.dispatchToElement(_param(dropTarget, e), #dragenter, e.event);
                }
            }
        }
    }

    function _dragEnd(e) {
        var draggingTarget = this._draggingTarget;
        
        if (draggingTarget) {
            draggingTarget.dragging = false;
        }

        this.dispatchToElement(_param(draggingTarget, e), #dragend, e.event);

        if (this._dropTarget) {
            this.dispatchToElement(_param(this._dropTarget, e), #drop, e.event);
        }

        this._draggingTarget = null;
        this._dropTarget = null;
    }

    function _param(target, e) {
        return {target: target, topTarget: e && e.topTarget};
    }
} //class Draggable
