<html>
<head>
<style>
div.zr {
    size: *;
    background-color: #eee;
}
</style>
<script type="text/tiscript">
include "../zrender/zrender.tis"

var zr;
var throttleRate;
var count;
var els;

function refresh() {
	count = $(#count).value;
	throttleRate = $(#throttle-rate).value;
	els = [];

	zr && zr.dispose();
	zr = zrender.init($(div.zr));

	init();
}

function init() {
	var lastTrigger = new Date().valueOf();
	var timer;
	var record = [];
	var recordLimit = 300;
	var lastTick = 0;

	var gradient = new zrender.LinearGradient();
	gradient.addColorStop(0, "red");
	gradient.addColorStop(1, "black");

	var viewWidth = zr.getWidth();
	var viewHeight = zr.getHeight();
	var center = [viewWidth / 2, viewHeight / 2];
	var baseRadius = Math.min(viewWidth, viewHeight) * 0.3;

	for (var i = 0; i < count; i++) {
		var theta = Math.random() * Math.PI * 2;
		var circle = new zrender.Circle({
			position: [
				center[0] + (baseRadius + Math.random() * 60) * Math.cos(theta),
				center[1] + (baseRadius + Math.random() * 60) * Math.sin(theta)
			],
			shape: {
				cx: 0,
				cy: 0,
				r: 3
			},
			style: {
				fill: gradient
			},
			onclick: (function (i) {
				return function () {
					view.msgbox("onclick",i);
				}
			})(i)
		});
		circle.___ii = i;
		els.push(circle);
		zr.add(circle);
	}

	var update = throttle(function (point) {
		for (var el in els) {
			var dist = Math.pow(
				Math.pow(point[0] - el.position[0], 2)
				+ Math.pow(point[1] - el.position[1], 2),
				0.5
			);

			if (dist < 0.1) {
				return;
			}

			var ratio = (baseRadius + Math.random() * 60) / dist;
			var targetPostion = [
				point[0] + (el.position[0] - point[0]) * ratio,
				point[1] + (el.position[1] - point[1]) * ratio
			];

			el.stopAnimation().animate("")
				.when(3000, {
					position: targetPostion
				})
				.start("elasticOut");
		}
	}, throttleRate);

	zr.on("mousemove", function (e) {
		update([e.offsetX, e.offsetY]);
	});
}


function throttle(fn, delay, debounce = null) {
	var currCall;
	var lastCall = 0;
	var lastExec = 0;
	var diff;
	var scope;
	var args;
	var debounceNextCall;

	delay = delay || 0;

	function exec() {
		lastExec = (new Date()).valueOf();
		fn.apply(scope, args || []);
	}

	var cb = function (arguments..) {
		currCall = (new Date()).valueOf();
		scope = this;
		args = arguments;
		var thisDelay = debounceNextCall || delay;
		var thisDebounce = debounceNextCall || debounce;
		diff = currCall - (thisDebounce ? lastCall : lastExec) - thisDelay;
		
		if (thisDebounce) {
			self.timer(thisDelay.toInteger(),exec);
		}
		else {
			if (diff >= 0) {
				exec();
			}
			else {
				self.timer(-diff.toInteger(),exec);
			}
		}

		lastCall = currCall;
	};

	return cb;
}

refresh();

$(#ok).onClick = refresh;
</script>
</head>
<body>
<h2>Move mouse. It is expected that animation start immediately without lag.</h2>
<div>
	Circles: <input id="count" type="integer" value="100" /> &nbsp;&nbsp;
	Throttle Rate: <input id="throttle-rate" type="integer" value="50" />
	<button id="ok">OK</button>
</div>
<div.zr/>
</body>
</html>